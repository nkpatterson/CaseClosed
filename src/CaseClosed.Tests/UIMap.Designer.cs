// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CaseClosed.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ClickCreateTestButton
        /// </summary>
        public void ClickCreateTestButton()
        {
            #region Variable Declarations
            HtmlButton uICreateTestButton = this.UISmokeTestsWindow.UISmokeTestsPage.UICreateTestButton;
            #endregion

            // Click 'Create Test' button
            Mouse.Click(uICreateTestButton, new Point(59, 14));
        }
        
        /// <summary>
        /// CloseBrowser
        /// </summary>
        public void CloseBrowser()
        {
            #region Variable Declarations
            BrowserWindow uISmokeTestsWindow = this.UISmokeTestsWindow;
            #endregion

            // Perform Close on Browser Window
            uISmokeTestsWindow.Close();
        }
        
        /// <summary>
        /// LogInAndGoToSmokeTests - Use 'LogInAndGoToSmokeTestsParams' to pass parameters into this method.
        /// </summary>
        public void LogInAndGoToSmokeTests()
        {
            #region Variable Declarations
            BrowserWindow uIInPrivateWindow1 = this.UIInPrivateWindow;
            HtmlEdit uIUseraccountEdit = this.UIInPrivateWindow.UISignInPage.UIUseraccountEdit;
            HtmlEdit uIPasswordEdit = this.UIInPrivateWindow.UISignInPage.UIPasswordEdit;
            HtmlSpan uISigninPane = this.UIInPrivateWindow.UISignInPage.UISigninPane;
            #endregion

            // Launch '%ProgramW6432%\Internet Explorer\iexplore.exe' with arguments '-private'
            ApplicationUnderTest uIInPrivateWindow = ApplicationUnderTest.Launch(this.LogInAndGoToSmokeTestsParams.UIInPrivateWindowExePath, this.LogInAndGoToSmokeTestsParams.UIInPrivateWindowAlternateExePath, "-private");

            // Go to web page 'http://casecloseddev.azurewebsites.net/smokeTests'
            uIInPrivateWindow1.NavigateToUrl(new System.Uri(this.LogInAndGoToSmokeTestsParams.UIInPrivateWindowUrl));

            // Type 'nkpatterson@caseclosed.onmicrosoft.com' in 'User account' text box
            uIUseraccountEdit.Text = this.LogInAndGoToSmokeTestsParams.UIUseraccountEditText;

            // Wait for 1 seconds for user delay between actions; Type '********' in 'Password' text box
            Playback.Wait(1000);
            uIPasswordEdit.Password = this.LogInAndGoToSmokeTestsParams.UIPasswordEditPassword;

            // Click 'Sign in' pane
            Mouse.Click(uISigninPane, new Point(37, 20));
        }
        
        /// <summary>
        /// VerifySmokeTestWasSuccessful - Use 'VerifySmokeTestWasSuccessfulExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifySmokeTestWasSuccessful()
        {
            #region Variable Declarations
            HtmlDiv uISmokeTestWasSuccessPanel = this.UISmokeTestsWindow.UISmokeTestsPage.UISmokeTestWasSuccessPanel;
            #endregion

            // Wait for 5 seconds for user delay between actions; Verify that the 'InnerText' property of 'Smoke Test was successful!' pane equals 'Smoke Test was successful! '
            Playback.Wait(5000);
            Assert.AreEqual(this.VerifySmokeTestWasSuccessfulExpectedValues.UISmokeTestWasSuccessPanelInnerText, uISmokeTestWasSuccessPanel.InnerText);
        }
        
        #region Properties
        public virtual LogInAndGoToSmokeTestsParams LogInAndGoToSmokeTestsParams
        {
            get
            {
                if ((this.mLogInAndGoToSmokeTestsParams == null))
                {
                    this.mLogInAndGoToSmokeTestsParams = new LogInAndGoToSmokeTestsParams();
                }
                return this.mLogInAndGoToSmokeTestsParams;
            }
        }
        
        public virtual VerifySmokeTestWasSuccessfulExpectedValues VerifySmokeTestWasSuccessfulExpectedValues
        {
            get
            {
                if ((this.mVerifySmokeTestWasSuccessfulExpectedValues == null))
                {
                    this.mVerifySmokeTestWasSuccessfulExpectedValues = new VerifySmokeTestWasSuccessfulExpectedValues();
                }
                return this.mVerifySmokeTestWasSuccessfulExpectedValues;
            }
        }
        
        public UIInPrivateWindow UIInPrivateWindow
        {
            get
            {
                if ((this.mUIInPrivateWindow == null))
                {
                    this.mUIInPrivateWindow = new UIInPrivateWindow();
                }
                return this.mUIInPrivateWindow;
            }
        }
        
        public UISmokeTestsWindow UISmokeTestsWindow
        {
            get
            {
                if ((this.mUISmokeTestsWindow == null))
                {
                    this.mUISmokeTestsWindow = new UISmokeTestsWindow();
                }
                return this.mUISmokeTestsWindow;
            }
        }
        #endregion
        
        #region Fields
        private LogInAndGoToSmokeTestsParams mLogInAndGoToSmokeTestsParams;
        
        private VerifySmokeTestWasSuccessfulExpectedValues mVerifySmokeTestWasSuccessfulExpectedValues;
        
        private UIInPrivateWindow mUIInPrivateWindow;
        
        private UISmokeTestsWindow mUISmokeTestsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogInAndGoToSmokeTests'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LogInAndGoToSmokeTestsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramW6432%\Internet Explorer\iexplore.exe' with arguments '-private'
        /// </summary>
        public string UIInPrivateWindowExePath = "C:\\Program Files\\Internet Explorer\\iexplore.exe";
        
        /// <summary>
        /// Launch '%ProgramW6432%\Internet Explorer\iexplore.exe' with arguments '-private'
        /// </summary>
        public string UIInPrivateWindowAlternateExePath = "%ProgramW6432%\\Internet Explorer\\iexplore.exe";
        
        /// <summary>
        /// Go to web page 'http://casecloseddev.azurewebsites.net/smokeTests'
        /// </summary>
        public string UIInPrivateWindowUrl = "http://casecloseddev.azurewebsites.net/smokeTests";
        
        /// <summary>
        /// Type 'nkpatterson@caseclosed.onmicrosoft.com' in 'User account' text box
        /// </summary>
        public string UIUseraccountEditText = "nkpatterson@caseclosed.onmicrosoft.com";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "ur05Cyd7vjJQuANVwT4FbSKiOv0ptwtr";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifySmokeTestWasSuccessful'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VerifySmokeTestWasSuccessfulExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Verify that the 'InnerText' property of 'Smoke Test was successful!' pane equals 'Smoke Test was successful! '
        /// </summary>
        public string UISmokeTestWasSuccessPanelInnerText = "Smoke Test was successful! ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInPrivateWindow : BrowserWindow
    {
        
        public UIInPrivateWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "InPrivate";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("InPrivate");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISignInPage UISignInPage
        {
            get
            {
                if ((this.mUISignInPage == null))
                {
                    this.mUISignInPage = new UISignInPage(this);
                }
                return this.mUISignInPage;
            }
        }
        #endregion
        
        #region Fields
        private UISignInPage mUISignInPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISignInPage : HtmlDocument
    {
        
        public UISignInPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Sign in to CaseClosed.Web.dev";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/3169cc1d-dcd7-4839-9aec-723163760fb6/oauth2/authorize";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = @"https://login.microsoftonline.com/3169cc1d-dcd7-4839-9aec-723163760fb6/oauth2/authorize?client_id=8da7e59c-da4a-4030-b34e-58ed5095e268&response_mode=form_post&response_type=code+id_token&scope=openid+profile&state=OpenIdConnect.AuthenticationProperties%3ddL7d69LrW4_ieQPky3eGtYO-cr-Ja6_cDkiC_1wlhLi6ocD44jCRV_85rho0RTFD-MTpzBwS5wVSxlD6Enp6NWT211buo9xPbEr8sORLO0MUjDItK0Fh9ZzwJFd_MCVMGi0DGnfN-UgAyLMSfcdB9HuIdjo00Xkjswne8AcUhyE&nonce=635821139895550998.ODE5N2E3YjctNjAxMC00ZjdkLWJlOWUtOWIzZTlkOGZmZjZiNjBjMjEwYmEtMzZmMy00ZDdlLTlhZTctN2U1ZGU1N2ViMWRk";
            this.WindowTitles.Add("Sign in to CaseClosed.Web.dev");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUseraccountEdit
        {
            get
            {
                if ((this.mUIUseraccountEdit == null))
                {
                    this.mUIUseraccountEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUseraccountEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "cred_userid_inputtext";
                    this.mUIUseraccountEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "login";
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "User account";
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "login_textfield textfield required email field normaltext";
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"login\" tabindex=\"1\" class=\"login_t";
                    this.mUIUseraccountEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIUseraccountEdit.WindowTitles.Add("Sign in to CaseClosed.Web.dev");
                    #endregion
                }
                return this.mUIUseraccountEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "cred_password_inputtext";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "passwd";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "login_textfield textfield required field normaltext";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"passwd\" tabindex=\"2\" class=\"login_";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Sign in to CaseClosed.Web.dev");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlSpan UISigninPane
        {
            get
            {
                if ((this.mUISigninPane == null))
                {
                    this.mUISigninPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISigninPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "cred_sign_in_button";
                    this.mUISigninPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Sign in";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "button normaltext cred_sign_in_button refresh_domain_state control-button button-" +
                        "two button_primary";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "tabindex=\"11\" class=\"button normaltext cred_sign_in_button refresh_domain_state c" +
                        "ontrol-button button-two button_primary\" id=\"cred_sign_in_button\" role=\"button\" " +
                        "style=\"opacity: 1;\"";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUISigninPane.WindowTitles.Add("Sign in to CaseClosed.Web.dev");
                    #endregion
                }
                return this.mUISigninPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUseraccountEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlSpan mUISigninPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISmokeTestsWindow : BrowserWindow
    {
        
        public UISmokeTestsWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Smoke Tests - My ASP.NET Application";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Smoke Tests - My ASP.NET Application");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISmokeTestsPage UISmokeTestsPage
        {
            get
            {
                if ((this.mUISmokeTestsPage == null))
                {
                    this.mUISmokeTestsPage = new UISmokeTestsPage(this);
                }
                return this.mUISmokeTestsPage;
            }
        }
        #endregion
        
        #region Fields
        private UISmokeTestsPage mUISmokeTestsPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISmokeTestsPage : HtmlDocument
    {
        
        public UISmokeTestsPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Smoke Tests - My ASP.NET Application";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/smokeTests";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://casecloseddev.azurewebsites.net/smokeTests";
            this.WindowTitles.Add("Smoke Tests - My ASP.NET Application");
            #endregion
        }
        
        #region Properties
        public HtmlButton UICreateTestButton
        {
            get
            {
                if ((this.mUICreateTestButton == null))
                {
                    this.mUICreateTestButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUICreateTestButton.SearchProperties[HtmlButton.PropertyNames.Id] = "btnCreateTest";
                    this.mUICreateTestButton.SearchProperties.Add(new PropertyExpression(HtmlButton.PropertyNames.DisplayText, "Create Test", PropertyExpressionOperator.Contains));
                    this.mUICreateTestButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateTestButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUICreateTestButton.WindowTitles.Add("Smoke Tests - My ASP.NET Application");
                    #endregion
                }
                return this.mUICreateTestButton;
            }
        }
        
        public HtmlDiv UISmokeTestWasSuccessPanel
        {
            get
            {
                if ((this.mUISmokeTestWasSuccessPanel == null))
                {
                    this.mUISmokeTestWasSuccessPanel = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUISmokeTestWasSuccessPanel.SearchProperties[HtmlDiv.PropertyNames.Id] = "flash";
                    this.mUISmokeTestWasSuccessPanel.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "Smoke Test was successful! ", PropertyExpressionOperator.Contains));
                    this.mUISmokeTestWasSuccessPanel.FilterProperties[HtmlDiv.PropertyNames.Class] = "panel-body";
                    this.mUISmokeTestWasSuccessPanel.WindowTitles.Add("Smoke Tests - My ASP.NET Application");
                    #endregion
                }
                return this.mUISmokeTestWasSuccessPanel;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUICreateTestButton;
        
        private HtmlDiv mUISmokeTestWasSuccessPanel;
        #endregion
    }
}
